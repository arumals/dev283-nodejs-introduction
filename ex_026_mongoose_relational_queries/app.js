// load mongoose
const mongoose = require('mongoose');

// use promises
mongoose.Promise = global.Promise;

// connect
mongoose.connect('mongodb://localhost:27017/test')
    .then(() => console.log('connected'))
    .catch((err) => console.error(err.message)); 

// post
const Post = mongoose.model('Post',{
    name: String,
    url: String,
    text: String,
    comments: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Comment' }],
});

// coment model
const Comment = mongoose.model('Comment', {
    text: String,
});

// comments
const comments = [
    { text: 'Comment #1' },
    { text: 'Comment #2' },
    { text: 'Comment #3' },
    { text: 'Comment #4' },
    { text: 'Comment #5' },
];

// retrive the ids generated by mongoose for each comment
const ca = comments.map((comment) => {
    const c = new Comment(comment);
    // this is an async all but we are not waiting for it
    c.save((err,res) => {
        if(err) return console.error(err);
    });
    // id is generated even if an error is found
    return c._id;
});

console.log(ca);

const post = new Post({
    name: 'Post #1',
    url: 'https://post1.com',
    text: 'Lorem ipsum dollor 1',
    comments: ca,
});

// save the post
post.save((err, post) => {
    // if error then notify
    if(err) return console.error(err);
    // retrieve the 
    Post.findOne({ _id: post._id }).populate('comments').exec((err, res) => {
        if(err) return console.error(err.message);
        console.log('The post is %s', res);
        mongoose.disconnect();
    })
});

